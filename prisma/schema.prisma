// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
enum Role {
  admin
  infographe
  employe
}

model User {
  username  String   @id @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Client {
  id            Int       @id @default(autoincrement())
  nom           String    @unique
  nomCommercial String?
  email         String?
  adresse       String?
  nrc           String?
  nif           String?
  ai            String?
  nis           String?
  plaquePrix    Float
  filmPrix      Float
  telephone     Phone[]
  employes      Employe[]
  projects      Project[]
}

enum ProjectStatus {
  EN_COURS
  TERMINE
  EN_ATTENTE
}

enum ProjectType {
  CTP
  CTF
}

enum PlaqueType {
  SM74
  SM72
  GTO
  MO
}

model Project {
  id            Int           @id @default(autoincrement())
  nom           String
  note          String?
  status        ProjectStatus
  type          ProjectType
  nbPlaque_Film Int

  // if CTP
  typePlaque  PlaqueType?
  // if CTF
  dimension_x Float?
  dimension_y Float?

  unitPrice      Float
  expectedPrice  Float
  additionalFees Float @default(0)
  finalPrice     Float

  nbTaches Int

  img String?

  taches    Tache[]
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId  Int?
  createdAt DateTime @default(now())
}

enum TacheStatus {
  EN_ATTENTE
  EN_TRAITEMENT
  EN_GRAVURE
  EN_LIVRAISON
  TERMINE
}

model TacheState {
  id         Int         @id @default(autoincrement())
  status     TacheStatus
  createdAt  DateTime    @default(now())
  duration   Int?
  finishedAt DateTime?
  tache      Tache       @relation(fields: [tacheId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tacheId    Int
}

model Tache {
  id            Int          @id @default(autoincrement())
  nbPlaque_Film Int
  currentState  TacheStatus
  statusList    TacheState[]
  project       Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId     Int?
}

model Phone {
  id        Int      @id @default(autoincrement())
  number    String
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId  Int?
  Employe   Employe? @relation(fields: [employeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employeId Int?
}

model Employe {
  id        Int     @id @default(autoincrement())
  nom       String
  telephone Phone[]
  client    Client? @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  clientId  Int?
}
